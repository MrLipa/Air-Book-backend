{
  "stats": {
    "suites": 23,
    "tests": 48,
    "passes": 48,
    "pending": 0,
    "failures": 0,
    "start": "2025-06-09T18:44:57.348Z",
    "end": "2025-06-09T18:45:04.649Z",
    "duration": 7301,
    "testsRegistered": 48,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ee540cb1-2da8-46ec-a186-1e8e4e43d8d4",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 4196,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "this.timeout(10000);\nconsole.log('[SETUP] Executing erd.sql and erd.cypher...');\nconst sqlPath = path.resolve(__dirname, '../../database/erd.sql');\nconst sql = fs.readFileSync(sqlPath, 'utf8');\nawait pool.query(sql);\nconsole.log('[SETUP] ✅ PostgreSQL schema + data loaded');\nconst cypherPath = path.resolve(__dirname, '../../database/erd.cypher');\nconst cypher = fs.readFileSync(cypherPath, 'utf8');\nconst statements = cypher\n  .split(/;\\s*\\n/)\n  .map((line) => line.trim())\n  .filter(Boolean);\nfor (const stmt of statements) {\n  await session.run(stmt);\n}\nconsole.log('[SETUP] ✅ Neo4j schema + data loaded');",
          "err": {},
          "uuid": "a838583b-81c2-4a2a-94c8-08bbc3083113",
          "parentUUID": "ee540cb1-2da8-46ec-a186-1e8e4e43d8d4",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 301,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "this.timeout(10000);\nconsole.log('[SETUP] Executing erd.sql and erd.cypher...');\nconst sqlPath = path.resolve(__dirname, '../../database/erd.sql');\nconst sql = fs.readFileSync(sqlPath, 'utf8');\nawait pool.query(sql);\nconsole.log('[SETUP] ✅ PostgreSQL schema + data loaded');\nconst cypherPath = path.resolve(__dirname, '../../database/erd.cypher');\nconst cypher = fs.readFileSync(cypherPath, 'utf8');\nconst statements = cypher\n  .split(/;\\s*\\n/)\n  .map((line) => line.trim())\n  .filter(Boolean);\nfor (const stmt of statements) {\n  await session.run(stmt);\n}\nconsole.log('[SETUP] ✅ Neo4j schema + data loaded');",
          "err": {},
          "uuid": "4279f2d9-da1e-4a01-a0f6-a7cef91924af",
          "parentUUID": "ee540cb1-2da8-46ec-a186-1e8e4e43d8d4",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "2b2dd02f-dc20-4d36-a960-78cb17d24a5d",
          "title": "GET /airport/getAllAirports",
          "fullFile": "C:\\Users\\tomek\\Desktop\\HomeAssistant\\air-book\\backend\\tests\\integration\\app.airport.test.mjs",
          "file": "\\tests\\integration\\app.airport.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should respond with 200 and return a list of airports in correct format",
              "fullTitle": "GET /airport/getAllAirports should respond with 200 and return a list of airports in correct format",
              "timedOut": false,
              "duration": 98,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(app)\n  .get('/airport/getAllAirports')\n  .set('Authorization', `Bearer ${adminToken}`)\n  .expect('Content-Type', /json/)\n  .expect(200);\nconst airports = response.body;\nexpect(airports).to.be.an('array');\nairports.forEach((airport) => {\n  expect(airport).to.be.an('object');\n  expect(airport).to.have.all.keys('airportId', 'city', 'country', 'image');\n  expect(airport.airportId).to.be.a('number');\n  expect(airport.city).to.be.a('string');\n  expect(airport.country).to.be.a('string');\n  expect(airport.image).to.be.a('string');\n});",
              "err": {},
              "uuid": "73562ea1-2bbb-4e01-a672-479ee08fea5d",
              "parentUUID": "2b2dd02f-dc20-4d36-a960-78cb17d24a5d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 403 if no token is provided",
              "fullTitle": "GET /airport/getAllAirports should return 403 if no token is provided",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(app).get('/airport/getAllAirports').expect(403);\nexpect(response.body).to.have.property('message', 'Missing or malformed token');",
              "err": {},
              "uuid": "b6c7a0d2-fd23-4547-b828-d99d399ba70f",
              "parentUUID": "2b2dd02f-dc20-4d36-a960-78cb17d24a5d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 403 if user has insufficient role",
              "fullTitle": "GET /airport/getAllAirports should return 403 if user has insufficient role",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(app)\n  .get('/airport/getAllAirports')\n  .set('Authorization', `Bearer ${userToken}`)\n  .expect(403);\nexpect(response.body).to.have.property('message').that.includes('insufficient permissions');",
              "err": {},
              "uuid": "75f31e0c-1ad7-4c19-89bc-2cdf323a3196",
              "parentUUID": "2b2dd02f-dc20-4d36-a960-78cb17d24a5d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 403 for invalid token",
              "fullTitle": "GET /airport/getAllAirports should return 403 for invalid token",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(app)\n  .get('/airport/getAllAirports')\n  .set('Authorization', 'Bearer invalid.token.here')\n  .expect(403);\nexpect(response.body).to.have.property('message', 'Invalid or expired token');",
              "err": {},
              "uuid": "ed6d1840-d220-4ab7-94e9-0eb9eece2946",
              "parentUUID": "2b2dd02f-dc20-4d36-a960-78cb17d24a5d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "73562ea1-2bbb-4e01-a672-479ee08fea5d",
            "b6c7a0d2-fd23-4547-b828-d99d399ba70f",
            "75f31e0c-1ad7-4c19-89bc-2cdf323a3196",
            "ed6d1840-d220-4ab7-94e9-0eb9eece2946"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 123,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "88135d5b-0e34-4a26-9661-4d4452195cd6",
          "title": "Flight Routes",
          "fullFile": "C:\\Users\\tomek\\Desktop\\HomeAssistant\\air-book\\backend\\tests\\integration\\app.flight.test.mjs",
          "file": "\\tests\\integration\\app.flight.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "07d6ff62-a947-4fb1-b182-a369e871766c",
              "title": "GET /flight/getAllFlights",
              "fullFile": "C:\\Users\\tomek\\Desktop\\HomeAssistant\\air-book\\backend\\tests\\integration\\app.flight.test.mjs",
              "file": "\\tests\\integration\\app.flight.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all flights with 200",
                  "fullTitle": "Flight Routes GET /flight/getAllFlights should return all flights with 200",
                  "timedOut": false,
                  "duration": 54,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .get('/flight/getAllFlights')\n  .set('Authorization', `Bearer ${token}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');",
                  "err": {},
                  "uuid": "cbc9dcf4-c2f6-4560-83f1-f0cdf65043f3",
                  "parentUUID": "07d6ff62-a947-4fb1-b182-a369e871766c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 403 if no token is provided",
                  "fullTitle": "Flight Routes GET /flight/getAllFlights should return 403 if no token is provided",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).get('/flight/getAllFlights');\nexpect(res.status).to.equal(403);",
                  "err": {},
                  "uuid": "a0aa3f62-77a8-459b-8fa3-f92bc6fd6455",
                  "parentUUID": "07d6ff62-a947-4fb1-b182-a369e871766c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cbc9dcf4-c2f6-4560-83f1-f0cdf65043f3",
                "a0aa3f62-77a8-459b-8fa3-f92bc6fd6455"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 59,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "03dc459d-32ca-48a5-97b9-32d63682d32d",
              "title": "POST /flight/searchFlights",
              "fullFile": "C:\\Users\\tomek\\Desktop\\HomeAssistant\\air-book\\backend\\tests\\integration\\app.flight.test.mjs",
              "file": "\\tests\\integration\\app.flight.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return flights from a city",
                  "fullTitle": "Flight Routes POST /flight/searchFlights should return flights from a city",
                  "timedOut": false,
                  "duration": 235,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).post('/flight/searchFlights').send({ cityFrom: 'Warsaw' });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');",
                  "err": {},
                  "uuid": "99198484-7218-4b9a-ad18-5582775719ed",
                  "parentUUID": "03dc459d-32ca-48a5-97b9-32d63682d32d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return flights to a city",
                  "fullTitle": "Flight Routes POST /flight/searchFlights should return flights to a city",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app).post('/flight/searchFlights').send({ cityTo: 'London' });\nexpect(res.status).to.equal(200);",
                  "err": {},
                  "uuid": "aa5260da-623f-422a-b412-f9a64f5c6253",
                  "parentUUID": "03dc459d-32ca-48a5-97b9-32d63682d32d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "99198484-7218-4b9a-ad18-5582775719ed",
                "aa5260da-623f-422a-b412-f9a64f5c6253"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 342,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "839a0b0e-4cc1-42e8-bc28-87c049c0d539",
              "title": "POST /flight/getFlightsByIds",
              "fullFile": "C:\\Users\\tomek\\Desktop\\HomeAssistant\\air-book\\backend\\tests\\integration\\app.flight.test.mjs",
              "file": "\\tests\\integration\\app.flight.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return flights for given IDs",
                  "fullTitle": "Flight Routes POST /flight/getFlightsByIds should return flights for given IDs",
                  "timedOut": false,
                  "duration": 67,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000);\nconst res = await request(app)\n  .post('/flight/getFlightsByIds')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ flightIds: [1] });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');",
                  "err": {},
                  "uuid": "2e552d56-834f-4c3c-a571-f6a05f23163a",
                  "parentUUID": "839a0b0e-4cc1-42e8-bc28-87c049c0d539",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2e552d56-834f-4c3c-a571-f6a05f23163a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 67,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d52805c5-cf58-4f18-9b87-32f7f222e385",
              "title": "GET /flight/getFlightsByUserId/:userId",
              "fullFile": "C:\\Users\\tomek\\Desktop\\HomeAssistant\\air-book\\backend\\tests\\integration\\app.flight.test.mjs",
              "file": "\\tests\\integration\\app.flight.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return user reservations and flights",
                  "fullTitle": "Flight Routes GET /flight/getFlightsByUserId/:userId should return user reservations and flights",
                  "timedOut": false,
                  "duration": 162,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(15000);\nconst res = await request(app)\n  .get('/flight/getFlightsByUserId/1')\n  .set('Authorization', `Bearer ${token}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');",
                  "err": {},
                  "uuid": "b08803c5-7379-4bb0-916f-26e4501d0d53",
                  "parentUUID": "d52805c5-cf58-4f18-9b87-32f7f222e385",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for invalid userId",
                  "fullTitle": "Flight Routes GET /flight/getFlightsByUserId/:userId should return 400 for invalid userId",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .get('/flight/getFlightsByUserId/abc')\n  .set('Authorization', `Bearer ${token}`);\nexpect(res.status).to.equal(400);",
                  "err": {},
                  "uuid": "088bf74a-ddc3-45f3-938a-8decdf610eca",
                  "parentUUID": "d52805c5-cf58-4f18-9b87-32f7f222e385",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b08803c5-7379-4bb0-916f-26e4501d0d53",
                "088bf74a-ddc3-45f3-938a-8decdf610eca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 169,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "73c0914d-d3d4-4df1-a560-cda00a6db35a",
              "title": "PATCH /flight/patchFlightById/:flightId",
              "fullFile": "C:\\Users\\tomek\\Desktop\\HomeAssistant\\air-book\\backend\\tests\\integration\\app.flight.test.mjs",
              "file": "\\tests\\integration\\app.flight.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should patch flight fields and return 200",
                  "fullTitle": "Flight Routes PATCH /flight/patchFlightById/:flightId should patch flight fields and return 200",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .patch('/flight/patchFlightById/1')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ price: 999 });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('message');",
                  "err": {},
                  "uuid": "f55ebc63-3631-4c0a-9d8a-4a4ad8fc8a53",
                  "parentUUID": "73c0914d-d3d4-4df1-a560-cda00a6db35a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f55ebc63-3631-4c0a-9d8a-4a4ad8fc8a53"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 107,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ce89fdb4-a123-4602-a0b6-6e81331c7263",
          "title": "POST /login",
          "fullFile": "C:\\Users\\tomek\\Desktop\\HomeAssistant\\air-book\\backend\\tests\\integration\\app.login.test.mjs",
          "file": "\\tests\\integration\\app.login.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "✅ should login successfully with correct credentials",
              "fullTitle": "POST /login ✅ should login successfully with correct credentials",
              "timedOut": false,
              "duration": 262,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).post('/login').send({\n  email: testUser.email,\n  password: testUser.password,\n});\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('accessToken');\nexpect(res.body).to.have.property('userId');\nexpect(res.body).to.have.property('role');\nexpect(res.headers['set-cookie']).to.exist;",
              "err": {},
              "uuid": "a55b196b-b78c-4ea2-aa31-426196470c5e",
              "parentUUID": "ce89fdb4-a123-4602-a0b6-6e81331c7263",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "❌ should return 400 if email is missing",
              "fullTitle": "POST /login ❌ should return 400 if email is missing",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).post('/login').send({ password: testUser.password });\nexpect(res.status).to.equal(400);\nexpect(res.body.message).to.include('required');",
              "err": {},
              "uuid": "88b405be-2a23-4b4a-8963-528aae425174",
              "parentUUID": "ce89fdb4-a123-4602-a0b6-6e81331c7263",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "❌ should return 400 if password is missing",
              "fullTitle": "POST /login ❌ should return 400 if password is missing",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).post('/login').send({ email: testUser.email });\nexpect(res.status).to.equal(400);\nexpect(res.body.message).to.include('required');",
              "err": {},
              "uuid": "a3310d8b-f76c-455f-8cf6-b932625333b8",
              "parentUUID": "ce89fdb4-a123-4602-a0b6-6e81331c7263",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "❌ should return 401 if email is incorrect",
              "fullTitle": "POST /login ❌ should return 401 if email is incorrect",
              "timedOut": false,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).post('/login').send({\n  email: 'wrong@example.com',\n  password: testUser.password,\n});\nexpect(res.status).to.equal(401);",
              "err": {},
              "uuid": "fafeb5d6-c5cb-45ad-a8d4-25e850cbdf8e",
              "parentUUID": "ce89fdb4-a123-4602-a0b6-6e81331c7263",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "❌ should return 401 if password is incorrect",
              "fullTitle": "POST /login ❌ should return 401 if password is incorrect",
              "timedOut": false,
              "duration": 90,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).post('/login').send({\n  email: testUser.email,\n  password: 'WrongPassword!',\n});\nexpect(res.status).to.equal(401);",
              "err": {},
              "uuid": "ec4cd54d-d299-4298-a1ff-baf39d2b5809",
              "parentUUID": "ce89fdb4-a123-4602-a0b6-6e81331c7263",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a55b196b-b78c-4ea2-aa31-426196470c5e",
            "88b405be-2a23-4b4a-8963-528aae425174",
            "a3310d8b-f76c-455f-8cf6-b932625333b8",
            "fafeb5d6-c5cb-45ad-a8d4-25e850cbdf8e",
            "ec4cd54d-d299-4298-a1ff-baf39d2b5809"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 401,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "056622ff-edc0-4d5f-a56a-0cda847c1087",
          "title": "GET /logout",
          "fullFile": "C:\\Users\\tomek\\Desktop\\HomeAssistant\\air-book\\backend\\tests\\integration\\app.logout.test.mjs",
          "file": "\\tests\\integration\\app.logout.test.mjs",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GET /logout\"",
              "fullTitle": "GET /logout \"before all\" hook in \"GET /logout\"",
              "timedOut": false,
              "duration": 32,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  userInfo: {\n    userId,\n    email: testUser.email,\n    role: testUser.role,\n  },\n};\nrefreshToken = jwt.sign(payload, process.env.REFRESH_TOKEN_SECRET, {\n  expiresIn: process.env.REFRESH_TOKEN_EXPIRY || '7d',\n});\nawait pool.query('INSERT INTO air_book.user_tokens (user_id, refresh_token) VALUES ($1, $2)', [\n  userId,\n  refreshToken,\n]);",
              "err": {},
              "uuid": "3b5df08b-4d12-46b5-8086-25ba5fad3b7d",
              "parentUUID": "056622ff-edc0-4d5f-a56a-0cda847c1087",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"GET /logout\"",
              "fullTitle": "GET /logout \"after all\" hook in \"GET /logout\"",
              "timedOut": false,
              "duration": 28,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await pool.query('DELETE FROM air_book.user_tokens WHERE refresh_token = $1', [refreshToken]);\n} catch (err) {\n  console.error('[AFTER] Cleanup error:', err.message);\n}",
              "err": {},
              "uuid": "83f0ee23-7a2c-44a9-927b-e5f8bf9a1d97",
              "parentUUID": "056622ff-edc0-4d5f-a56a-0cda847c1087",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "✅ should clear the cookie and remove the token from DB",
              "fullTitle": "GET /logout ✅ should clear the cookie and remove the token from DB",
              "timedOut": false,
              "duration": 64,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n  .get('/logout')\n  .set('Cookie', [`jwt=${refreshToken}`]);\nexpect(res.status).to.equal(200);\nexpect(res.body.message).to.equal('User logout');\nexpect(res.headers['set-cookie']).to.exist;\nexpect(res.headers['set-cookie'][0]).to.include('jwt=;');",
              "err": {},
              "uuid": "b3e42849-b816-4103-b21c-616356d46f9f",
              "parentUUID": "056622ff-edc0-4d5f-a56a-0cda847c1087",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "✅ should return 204 if no cookie is present",
              "fullTitle": "GET /logout ✅ should return 204 if no cookie is present",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/logout');\nexpect(res.status).to.equal(204);",
              "err": {},
              "uuid": "845330a5-ba11-486e-892c-d353c02c5dbf",
              "parentUUID": "056622ff-edc0-4d5f-a56a-0cda847c1087",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "❌ should return 403 if token is malformed",
              "fullTitle": "GET /logout ❌ should return 403 if token is malformed",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/logout').set('Cookie', ['jwt=invalid_token_value']);\nexpect(res.status).to.equal(403);",
              "err": {},
              "uuid": "6598dd09-d18c-4998-8cff-2b04599a2c0b",
              "parentUUID": "056622ff-edc0-4d5f-a56a-0cda847c1087",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b3e42849-b816-4103-b21c-616356d46f9f",
            "845330a5-ba11-486e-892c-d353c02c5dbf",
            "6598dd09-d18c-4998-8cff-2b04599a2c0b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 75,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9330222c-15c8-4ebe-97d3-a340941b6052",
          "title": "GET /refreshToken",
          "fullFile": "C:\\Users\\tomek\\Desktop\\HomeAssistant\\air-book\\backend\\tests\\integration\\app.refreshToken.test.mjs",
          "file": "\\tests\\integration\\app.refreshToken.test.mjs",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GET /refreshToken\"",
              "fullTitle": "GET /refreshToken \"before all\" hook in \"GET /refreshToken\"",
              "timedOut": false,
              "duration": 59,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pool.query('DELETE FROM air_book.user_tokens WHERE user_id = $1', [userId]);\nconst payload = {\n  userInfo: {\n    userId,\n    email: 'xavier@gmail.com',\n    role: 'admin',\n  },\n};\nrefreshToken = jwt.sign(payload, process.env.REFRESH_TOKEN_SECRET, {\n  expiresIn: process.env.REFRESH_TOKEN_EXPIRY || '7d',\n});\nawait pool.query('INSERT INTO air_book.user_tokens (user_id, refresh_token) VALUES ($1, $2)', [\n  userId,\n  refreshToken,\n]);",
              "err": {},
              "uuid": "6e1ba171-a5f1-4e8b-9806-10f3e6bbbd99",
              "parentUUID": "9330222c-15c8-4ebe-97d3-a340941b6052",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"GET /refreshToken\"",
              "fullTitle": "GET /refreshToken \"after all\" hook in \"GET /refreshToken\"",
              "timedOut": false,
              "duration": 29,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  if (refreshToken) {\n    await pool.query('DELETE FROM air_book.user_tokens WHERE refresh_token = $1', [\n      refreshToken,\n    ]);\n  }\n} catch (err) {\n  console.error('[AFTER] Cleanup error:', err.message);\n}",
              "err": {},
              "uuid": "fe8b67a0-8203-4eaf-9567-64d7f2916675",
              "parentUUID": "9330222c-15c8-4ebe-97d3-a340941b6052",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "✅ should return new access token for valid refresh token",
              "fullTitle": "GET /refreshToken ✅ should return new access token for valid refresh token",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n  .get('/refreshToken')\n  .set('Cookie', [`jwt=${refreshToken}`]);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('accessToken');\nexpect(res.body).to.have.property('userId');\nexpect(res.body).to.have.property('role');",
              "err": {},
              "uuid": "7f18c284-2a5b-4f03-b499-c64b57ed59d9",
              "parentUUID": "9330222c-15c8-4ebe-97d3-a340941b6052",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "❌ should return 401 if no cookie is present",
              "fullTitle": "GET /refreshToken ❌ should return 401 if no cookie is present",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/refreshToken');\nexpect(res.status).to.equal(401);",
              "err": {},
              "uuid": "992de169-5b4c-4052-8b67-e9de584ac042",
              "parentUUID": "9330222c-15c8-4ebe-97d3-a340941b6052",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "❌ should return 403 if token is invalid",
              "fullTitle": "GET /refreshToken ❌ should return 403 if token is invalid",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/refreshToken').set('Cookie', ['jwt=invalid_token_value']);\nexpect(res.status).to.equal(403);",
              "err": {},
              "uuid": "2eb1a68b-ec11-4b90-94a6-fc2bde5c54c4",
              "parentUUID": "9330222c-15c8-4ebe-97d3-a340941b6052",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "❌ should return 403 if user not found in DB",
              "fullTitle": "GET /refreshToken ❌ should return 403 if user not found in DB",
              "timedOut": false,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakePayload = {\n  userInfo: {\n    userId: 9999999,\n    email: 'nonexistent@example.com',\n    role: 'user',\n  },\n};\nconst fakeToken = jwt.sign(fakePayload, process.env.REFRESH_TOKEN_SECRET, {\n  expiresIn: '1h',\n});\nconst res = await request(app)\n  .get('/refreshToken')\n  .set('Cookie', [`jwt=${fakeToken}`]);\nexpect(res.status).to.equal(403);\nexpect(res.body.message).to.equal('User not found');",
              "err": {},
              "uuid": "8ef00f18-1c52-487b-95b3-b3c04fbc83ed",
              "parentUUID": "9330222c-15c8-4ebe-97d3-a340941b6052",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7f18c284-2a5b-4f03-b499-c64b57ed59d9",
            "992de169-5b4c-4052-8b67-e9de584ac042",
            "2eb1a68b-ec11-4b90-94a6-fc2bde5c54c4",
            "8ef00f18-1c52-487b-95b3-b3c04fbc83ed"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 79,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a4220a8b-a577-44af-8071-ce74193ecc65",
          "title": "POST /register",
          "fullFile": "C:\\Users\\tomek\\Desktop\\HomeAssistant\\air-book\\backend\\tests\\integration\\app.register.test.mjs",
          "file": "\\tests\\integration\\app.register.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "✅ should register a new user and return 201",
              "fullTitle": "POST /register ✅ should register a new user and return 201",
              "timedOut": false,
              "duration": 129,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).post('/register').send(userData);\nexpect(res.status).to.equal(201);\nexpect(res.body.message).to.include(userData.email);",
              "err": {},
              "uuid": "78a3a296-de9f-48b9-99e2-f591cd5903c3",
              "parentUUID": "a4220a8b-a577-44af-8071-ce74193ecc65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "❌ should return 409 if user with email already exists",
              "fullTitle": "POST /register ❌ should return 409 if user with email already exists",
              "timedOut": false,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).post('/register').send(userData);\nexpect(res.status).to.equal(409);\nexpect(res.body.message).to.equal('User with this email already exists.');",
              "err": {},
              "uuid": "1a9ee366-a190-4fe6-9499-6e88fda1a442",
              "parentUUID": "a4220a8b-a577-44af-8071-ce74193ecc65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "❌ should return 400 if fields are missing",
              "fullTitle": "POST /register ❌ should return 400 if fields are missing",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).post('/register').send({\n  email: 'missing@example.com',\n  password: 'Test123!',\n});\nexpect(res.status).to.equal(400);\nexpect(res.body.message).to.include('\"firstName\" is required'); // zakładamy, że używasz Joi lub podobnej walidacji",
              "err": {},
              "uuid": "d93258e3-3ed7-41f9-8544-14f07c12cc7c",
              "parentUUID": "a4220a8b-a577-44af-8071-ce74193ecc65",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "78a3a296-de9f-48b9-99e2-f591cd5903c3",
            "1a9ee366-a190-4fe6-9499-6e88fda1a442",
            "d93258e3-3ed7-41f9-8544-14f07c12cc7c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 171,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4b103c32-a41e-4324-ba82-2d0580160fe9",
          "title": "User endpoints",
          "fullFile": "C:\\Users\\tomek\\Desktop\\HomeAssistant\\air-book\\backend\\tests\\integration\\app.user.test.mjs",
          "file": "\\tests\\integration\\app.user.test.mjs",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f9faa342-3402-4620-8ff4-de252c1132a9",
              "title": "GET /user/getAllUsers",
              "fullFile": "C:\\Users\\tomek\\Desktop\\HomeAssistant\\air-book\\backend\\tests\\integration\\app.user.test.mjs",
              "file": "\\tests\\integration\\app.user.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a list of users for admin",
                  "fullTitle": "User endpoints GET /user/getAllUsers should return a list of users for admin",
                  "timedOut": false,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .get('/user/getAllUsers')\n  .set('Authorization', `Bearer ${adminToken}`)\n  .expect(200);\nexpect(res.body).to.be.an('array');",
                  "err": {},
                  "uuid": "591176de-11b9-468e-ac75-fdd876a6baa8",
                  "parentUUID": "f9faa342-3402-4620-8ff4-de252c1132a9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 403 for non-admin",
                  "fullTitle": "User endpoints GET /user/getAllUsers should return 403 for non-admin",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .get('/user/getAllUsers')\n  .set('Authorization', `Bearer ${userToken}`)\n  .expect(403);",
                  "err": {},
                  "uuid": "609ac5c1-7015-4cc9-b079-c5a0f157714b",
                  "parentUUID": "f9faa342-3402-4620-8ff4-de252c1132a9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "591176de-11b9-468e-ac75-fdd876a6baa8",
                "609ac5c1-7015-4cc9-b079-c5a0f157714b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 54,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f36e4d5a-d0cd-4a10-84ee-1dfd3b31b07f",
              "title": "GET /user/getUserIdByEmail/:email",
              "fullFile": "C:\\Users\\tomek\\Desktop\\HomeAssistant\\air-book\\backend\\tests\\integration\\app.user.test.mjs",
              "file": "\\tests\\integration\\app.user.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return userId for existing email",
                  "fullTitle": "User endpoints GET /user/getUserIdByEmail/:email should return userId for existing email",
                  "timedOut": false,
                  "duration": 53,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .get('/user/getUserIdByEmail/xavier@gmail.com')\n  .set('Authorization', `Bearer ${adminToken}`)\n  .expect(200);\nexpect(res.body).to.have.property('userId');",
                  "err": {},
                  "uuid": "3b677e4e-55b0-47bc-8baa-5c0bcc04438d",
                  "parentUUID": "f36e4d5a-d0cd-4a10-84ee-1dfd3b31b07f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for unknown email",
                  "fullTitle": "User endpoints GET /user/getUserIdByEmail/:email should return 404 for unknown email",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n  .get('/user/getUserIdByEmail/unknown@example.com')\n  .set('Authorization', `Bearer ${adminToken}`)\n  .expect(404);",
                  "err": {},
                  "uuid": "2e04a88a-f588-4ff9-b952-93c9c6024b6d",
                  "parentUUID": "f36e4d5a-d0cd-4a10-84ee-1dfd3b31b07f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3b677e4e-55b0-47bc-8baa-5c0bcc04438d",
                "2e04a88a-f588-4ff9-b952-93c9c6024b6d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 97,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dccd9c02-fa2e-4cce-a6e3-7ebba516eaf2",
              "title": "GET /user/getUserById/:userId",
              "fullFile": "C:\\Users\\tomek\\Desktop\\HomeAssistant\\air-book\\backend\\tests\\integration\\app.user.test.mjs",
              "file": "\\tests\\integration\\app.user.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return user details",
                  "fullTitle": "User endpoints GET /user/getUserById/:userId should return user details",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .get('/user/getUserById/1')\n  .set('Authorization', `Bearer ${adminToken}`)\n  .expect(200);\nexpect(res.body).to.have.property('userId', 1);",
                  "err": {},
                  "uuid": "e942ae08-2679-4093-884d-4d36c47b9269",
                  "parentUUID": "dccd9c02-fa2e-4cce-a6e3-7ebba516eaf2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for non-existing user",
                  "fullTitle": "User endpoints GET /user/getUserById/:userId should return 404 for non-existing user",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n  .get('/user/getUserById/9999')\n  .set('Authorization', `Bearer ${adminToken}`)\n  .expect(404);",
                  "err": {},
                  "uuid": "0f7c37a9-0d16-42ad-95f8-761013898382",
                  "parentUUID": "dccd9c02-fa2e-4cce-a6e3-7ebba516eaf2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e942ae08-2679-4093-884d-4d36c47b9269",
                "0f7c37a9-0d16-42ad-95f8-761013898382"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 84,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a881a701-c445-4e60-a917-dda8b8f37b07",
              "title": "POST /user/createNewUser",
              "fullFile": "C:\\Users\\tomek\\Desktop\\HomeAssistant\\air-book\\backend\\tests\\integration\\app.user.test.mjs",
              "file": "\\tests\\integration\\app.user.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a new user",
                  "fullTitle": "User endpoints POST /user/createNewUser should create a new user",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .post('/user/createNewUser')\n  .set('Authorization', `Bearer ${adminToken}`)\n  .send(newUser)\n  .expect(201);\nexpect(res.body).to.have.property('userId');",
                  "err": {},
                  "uuid": "e81c8766-ae79-4a37-8cb0-7982499feaf6",
                  "parentUUID": "a881a701-c445-4e60-a917-dda8b8f37b07",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if required fields missing",
                  "fullTitle": "User endpoints POST /user/createNewUser should return 400 if required fields missing",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const badUser = { ...newUser };\ndelete badUser.email;\nawait request(app)\n  .post('/user/createNewUser')\n  .set('Authorization', `Bearer ${adminToken}`)\n  .send(badUser)\n  .expect(400);",
                  "err": {},
                  "uuid": "7057ae8a-a81e-4cc2-88e1-176f9d3281a9",
                  "parentUUID": "a881a701-c445-4e60-a917-dda8b8f37b07",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e81c8766-ae79-4a37-8cb0-7982499feaf6",
                "7057ae8a-a81e-4cc2-88e1-176f9d3281a9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 50,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "569d352e-634c-469f-ae26-dec13ab007df",
              "title": "PUT /user/updateUserById/:userId",
              "fullFile": "C:\\Users\\tomek\\Desktop\\HomeAssistant\\air-book\\backend\\tests\\integration\\app.user.test.mjs",
              "file": "\\tests\\integration\\app.user.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update user details",
                  "fullTitle": "User endpoints PUT /user/updateUserById/:userId should update user details",
                  "timedOut": false,
                  "duration": 96,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updated = {\n  firstName: 'Updated',\n  lastName: 'User',\n  email: 'updated@example.com',\n  password: 'newpass',\n  image: 'img.jpg',\n  phone: '987654321',\n  address: 'Updated Street',\n  description: 'Updated desc',\n  role: 'user',\n};\nconst res = await request(app)\n  .put('/user/updateUserById/2')\n  .set('Authorization', `Bearer ${adminToken}`)\n  .send(updated)\n  .expect(200);\nexpect(res.body).to.have.property('message', 'User updated');",
                  "err": {},
                  "uuid": "9c2ed3eb-c973-4afb-858c-5cd010f4f570",
                  "parentUUID": "569d352e-634c-469f-ae26-dec13ab007df",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if fields are empty",
                  "fullTitle": "User endpoints PUT /user/updateUserById/:userId should return 400 if fields are empty",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n  .put('/user/updateUserById/2')\n  .set('Authorization', `Bearer ${adminToken}`)\n  .send({})\n  .expect(400);",
                  "err": {},
                  "uuid": "d0a530f5-7b66-4406-8b34-2fbca5235b35",
                  "parentUUID": "569d352e-634c-469f-ae26-dec13ab007df",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9c2ed3eb-c973-4afb-858c-5cd010f4f570",
                "d0a530f5-7b66-4406-8b34-2fbca5235b35"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 102,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f9d738ba-ff64-4978-8a3c-12e0ba21abf3",
              "title": "PATCH /user/patchUserById/:userId",
              "fullFile": "C:\\Users\\tomek\\Desktop\\HomeAssistant\\air-book\\backend\\tests\\integration\\app.user.test.mjs",
              "file": "\\tests\\integration\\app.user.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should patch user details",
                  "fullTitle": "User endpoints PATCH /user/patchUserById/:userId should patch user details",
                  "timedOut": false,
                  "duration": 40,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n  .patch('/user/patchUserById/2')\n  .set('Authorization', `Bearer ${adminToken}`)\n  .send({ description: 'patched' })\n  .expect(200);",
                  "err": {},
                  "uuid": "0e8efe9c-0844-475a-a5f9-f3b329a02f7e",
                  "parentUUID": "f9d738ba-ff64-4978-8a3c-12e0ba21abf3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if no valid fields",
                  "fullTitle": "User endpoints PATCH /user/patchUserById/:userId should return 400 if no valid fields",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n  .patch('/user/patchUserById/2')\n  .set('Authorization', `Bearer ${adminToken}`)\n  .send({})\n  .expect(400);",
                  "err": {},
                  "uuid": "47aa0902-38ca-45dd-b963-68700803c110",
                  "parentUUID": "f9d738ba-ff64-4978-8a3c-12e0ba21abf3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0e8efe9c-0844-475a-a5f9-f3b329a02f7e",
                "47aa0902-38ca-45dd-b963-68700803c110"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 46,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "39206d6a-485c-4bfe-9cb0-44ee837ea651",
              "title": "DELETE /user/deleteUserById/:userId",
              "fullFile": "C:\\Users\\tomek\\Desktop\\HomeAssistant\\air-book\\backend\\tests\\integration\\app.user.test.mjs",
              "file": "\\tests\\integration\\app.user.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete a user",
                  "fullTitle": "User endpoints DELETE /user/deleteUserById/:userId should delete a user",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .delete('/user/deleteUserById/2')\n  .set('Authorization', `Bearer ${adminToken}`)\n  .expect(200);\nexpect(res.body).to.have.property('message', 'User deleted');",
                  "err": {},
                  "uuid": "71ce5e5d-ac41-4344-b552-6e9fbf967066",
                  "parentUUID": "39206d6a-485c-4bfe-9cb0-44ee837ea651",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if user not found",
                  "fullTitle": "User endpoints DELETE /user/deleteUserById/:userId should return 404 if user not found",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n  .delete('/user/deleteUserById/9999')\n  .set('Authorization', `Bearer ${adminToken}`)\n  .expect(404);",
                  "err": {},
                  "uuid": "a65f98ba-c973-489b-8e0a-e033acbb595a",
                  "parentUUID": "39206d6a-485c-4bfe-9cb0-44ee837ea651",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "71ce5e5d-ac41-4344-b552-6e9fbf967066",
                "a65f98ba-c973-489b-8e0a-e033acbb595a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 70,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4e4c0dbd-832b-4369-877b-19b6e8a46ce3",
              "title": "POST /user/createNotification",
              "fullFile": "C:\\Users\\tomek\\Desktop\\HomeAssistant\\air-book\\backend\\tests\\integration\\app.user.test.mjs",
              "file": "\\tests\\integration\\app.user.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a notification",
                  "fullTitle": "User endpoints POST /user/createNotification should create a notification",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .post('/user/createNotification')\n  .set('Authorization', `Bearer ${adminToken}`)\n  .send({ userId: 1, message: 'Hello' })\n  .expect(201);\nexpect(res.body).to.have.property('notification');",
                  "err": {},
                  "uuid": "a4589f2a-21ed-4f86-bd9c-f17788c46dc8",
                  "parentUUID": "4e4c0dbd-832b-4369-877b-19b6e8a46ce3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a4589f2a-21ed-4f86-bd9c-f17788c46dc8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 38,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "72314499-c502-4a07-ab61-ed49dbfdb774",
              "title": "POST /user/createReservation",
              "fullFile": "C:\\Users\\tomek\\Desktop\\HomeAssistant\\air-book\\backend\\tests\\integration\\app.user.test.mjs",
              "file": "\\tests\\integration\\app.user.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a reservation",
                  "fullTitle": "User endpoints POST /user/createReservation should create a reservation",
                  "timedOut": false,
                  "duration": 196,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .post('/user/createReservation')\n  .set('Authorization', `Bearer ${adminToken}`)\n  .send({ userId: 1, flightId: 1 })\n  .expect(201);\nexpect(res.body).to.have.property('reservation');",
                  "err": {},
                  "uuid": "8f72ddaa-0134-4de6-99aa-d49b45988e83",
                  "parentUUID": "72314499-c502-4a07-ab61-ed49dbfdb774",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if required fields missing",
                  "fullTitle": "User endpoints POST /user/createReservation should return 400 if required fields missing",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n  .post('/user/createReservation')\n  .set('Authorization', `Bearer ${adminToken}`)\n  .send({ userId: 2 })\n  .expect(400);",
                  "err": {},
                  "uuid": "a139d07c-13da-4341-a2fc-805d162b9eb0",
                  "parentUUID": "72314499-c502-4a07-ab61-ed49dbfdb774",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8f72ddaa-0134-4de6-99aa-d49b45988e83",
                "a139d07c-13da-4341-a2fc-805d162b9eb0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 205,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0c536985-5f53-4b32-87ec-7b32804c2090",
              "title": "DELETE /user/deleteReservationById/:reservationId",
              "fullFile": "C:\\Users\\tomek\\Desktop\\HomeAssistant\\air-book\\backend\\tests\\integration\\app.user.test.mjs",
              "file": "\\tests\\integration\\app.user.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete a reservation",
                  "fullTitle": "User endpoints DELETE /user/deleteReservationById/:reservationId should delete a reservation",
                  "timedOut": false,
                  "duration": 170,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .delete('/user/deleteReservationById/1')\n  .set('Authorization', `Bearer ${adminToken}`)\n  .expect(200);\nexpect(res.body.message).to.include('Reservation deleted');",
                  "err": {},
                  "uuid": "0c631942-9f35-4ddb-9e83-69078031d20a",
                  "parentUUID": "0c536985-5f53-4b32-87ec-7b32804c2090",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if reservation not found",
                  "fullTitle": "User endpoints DELETE /user/deleteReservationById/:reservationId should return 404 if reservation not found",
                  "timedOut": false,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n  .delete('/user/deleteReservationById/9999')\n  .set('Authorization', `Bearer ${adminToken}`)\n  .expect(404);",
                  "err": {},
                  "uuid": "48ee2ed6-1fac-4e19-a2cd-3e53fded39d5",
                  "parentUUID": "0c536985-5f53-4b32-87ec-7b32804c2090",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0c631942-9f35-4ddb-9e83-69078031d20a",
                "48ee2ed6-1fac-4e19-a2cd-3e53fded39d5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 206,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d2930c30-2781-4d33-94f2-7d81385b818d",
              "title": "GET /user/getNotificationsByUserId/:userId",
              "fullFile": "C:\\Users\\tomek\\Desktop\\HomeAssistant\\air-book\\backend\\tests\\integration\\app.user.test.mjs",
              "file": "\\tests\\integration\\app.user.test.mjs",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return user notifications",
                  "fullTitle": "User endpoints GET /user/getNotificationsByUserId/:userId should return user notifications",
                  "timedOut": false,
                  "duration": 40,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .get('/user/getNotificationsByUserId/1')\n  .set('Authorization', `Bearer ${adminToken}`)\n  .expect(200);\nexpect(res.body).to.be.an('array');",
                  "err": {},
                  "uuid": "e547dcde-1cf4-4e82-82ba-b2fb3aae8782",
                  "parentUUID": "d2930c30-2781-4d33-94f2-7d81385b818d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if userId is invalid",
                  "fullTitle": "User endpoints GET /user/getNotificationsByUserId/:userId should return 400 if userId is invalid",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n  .get('/user/getNotificationsByUserId/abc')\n  .set('Authorization', `Bearer ${adminToken}`)\n  .expect(400);",
                  "err": {},
                  "uuid": "fa7335b7-56f7-4dba-89a3-4fb79859e041",
                  "parentUUID": "d2930c30-2781-4d33-94f2-7d81385b818d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e547dcde-1cf4-4e82-82ba-b2fb3aae8782",
                "fa7335b7-56f7-4dba-89a3-4fb79859e041"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 49,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "test-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "logs",
        "reportFilename": "test-report"
      },
      "version": "6.2.0"
    }
  }
}